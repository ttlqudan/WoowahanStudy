# 1장 : 신뢰할 수 있고 확장 가능하며 유지보수하기 쉬운 애플리케이션

- 어플리케이션은 계산중심 보다는 데이터 중심적으로의 변화
- 데이터의 양, 복잡도, 변화 속도가 문제
- 데이터베이스, 캐시, 검색 색인, 스트림 처리, 일괄처리가 필요함

### 데이터 시스템에 대한 생각
- 데이터 시스템이라는 포괄적 용어
  - 여러 시스템의 분류간 경계가 흐려지고 있다.
  - 데이터 처리와 저장 모두를 만족시킬 수 없는 과도하고 광범위한 요구사항
- 대부분의 소프트웨어 시스템에서 중요하게 여기는 세 가지 관심사
  - 신뢰성
  - 확장성
  - 유지보수성

### 신뢰성
- 무언가 잘못 되더라도 지속적으로 올바르게 동작함을 의미
- 결함 : 사양에서 벗어난 시스템의 한 구성요소
- 장애 : 사용자에게 필요한 서비스를 제공하지 못하고 시스템 전체가 멈춘 경우
- 해결책이 있는 결함의 유형
  - 하드웨어 결함 : 소프트웨어 내결함성 기술을 사용하거나 하드웨어 중복성을 추가해 전체 장비의 손실을 견딜 수 있는 시스템으로 점점 옮겨가고 있다.
  - 소프트웨어 오류 : 특정 상황에 의해 발생하기 전까지 오랫동안 나타나지 않는다. 신속한 해결책이 없기에 여러가지 작은 일들로 문제 해결에 도움을 줄수 있다. 
  - 인적 오류 : 휴먼에러를 방지하기 위한 다양한 방법들이 필요(자동화, 샌드박스, 테스트 등)
- 비용과 직결되는 중요한 신뢰성


### 확장성
- 증가한 부하에 대처하는 시스템 능력
- 시스템이 특정 방식으로 커지면 이에 대처하기 위한 선택은 무엇일까 / 추가 부하를 다루기 위해 계산 자원을 어떻게 투입할까 에 대한 고려영역
- 부하 기술하기
  - 부하 매개변수라 부르는 몇개의 숫자로 나타낼수 있는 '부하'
  - 상황에 따라 얼만큼의 부하가 발생 했는가
- 성능 기술하기
  - 처리량 과 응답 시간
  - 평균의 함정
  - 어느 성능에 집중할 것인가	
- 부하 대응 접근 방식
  - 용량 확장 vs 규모 확장


### 유지보수성
- 운용성 : 운영의 편리함 만들기
  - 자동화, 알림, 로깅 등
- 단순성 : 복잡도 관리
  - 추상화의 장점과 단점
- 발전성 : 변화를 쉽게 만들기
  - 애자일, 리팩토링

## 정리
- 애플리케이션이 유용하려면 다양한 요구사항을 충족시켜야 한다.
- 신뢰성 : 결함이 발생해도 시스템이 올바르게 동작하게 만든다는 의미
- 확장성 : 부하가 증가해도 좋은 성능을 유지하기 위한 전략
- 유지보수성 : 시스템에서 작업하는 엔지니어와 운영팀의 삶을 개선
